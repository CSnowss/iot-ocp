package com.redhat.demo.iot.datacenter.monitor
 
import com.redhat.demo.businessRules.Measure;


rule "OrganTemperatureTooHigh"
	lock-on-active true
	when
		$t : Measure( category == "Organ", dataType == "temperature", payload != null, Integer.parseInt(payload) >= 70 )
	then
		System.out.println("Rule 'high temperature' fired as temperature is " + $t.getPayload());
		$t.setErrorCode(1);
		$t.setErrorMessage("Temperature too high");
		update( $t );
end 


rule "OrganVibrationTooHigh"
	lock-on-active true
	when
		$t : Measure( category == "Organ", dataType == "vibration", payload != null, Integer.parseInt(payload) >= 15 )
	then
		System.out.println("Rule 'high vibration' fired as vibration is " + $t.getPayload());
		$t.setErrorCode(1);
		$t.setErrorMessage("Vibration too high");
		update( $t );
end 

rule "MachineTemperatureTooHigh"
	lock-on-active true
	when
		$t : Measure( category == "Machine", dataType == "temperature", payload != null, Integer.parseInt(payload) >= 100 )
	then
		System.out.println("Rule 'high temperature' fired as temperature is " + $t.getPayload());
		$t.setErrorCode(1);
		$t.setErrorMessage("Temperature too high");
		update( $t );
end 

rule "MachineVibrationTooHigh"
	lock-on-active true
	when
		$t : Measure( category == "Machine", dataType == "vibration", payload != null, Integer.parseInt(payload) >= 10 )
	then
		System.out.println("Rule 'high vibration' fired as vibration is " + $t.getPayload());
		$t.setErrorCode(1);
		$t.setErrorMessage("Vibration too high");
		update( $t );
end 
